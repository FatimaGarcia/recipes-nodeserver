#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var https = require("https");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');

app.set('port', port);
app.set('https-port', 8443);


// Create HTTP server.
var server = http.createServer(app); 
// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

if (PROPERTIES.secure) {
  // Create secure server
  var serverSecure = https.createServer(options, app);
  // Listen secure on provided port, on all network interfaces.
  serverSecure.listen(app.get('https-port'));
  serverSecure.on('error', onError);
  serverSecure.on('listening', onListening);
}

//Database connection
const mongoose = require('mongoose');
mongoose.connect(PROPERTIES.database, { useUnifiedTopology: true, useNewUrlParser: true }, function(err, res){
  if(err) { console.log("Error connecting to database -"+err) }
  console.log('Database connected');
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log('Listening and running on http://localhost:' + addr.port);
}
